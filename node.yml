services:
  # Create keys and genesis
  keystore-init:
    image: ghcr.io/topos-protocol/polygon-edge:${TOPOS_EDGE_VERSION}
    container_name: keystore-init
    init: true
    command: ["init", "ibft"]
    environment:
      - CHAIN_ID=${TOPOS_CHAIN_ID}
      - BOOTNODE_DOMAIN_NAME=topos-node-1
    volumes:
      - topos-data:/data
    networks:
      - network-environment

  # Install the edge binary in the current volume
  install-edge:
    image: ghcr.io/topos-protocol/topos:${TOPOS_VERSION}
    container_name: install-edge
    command:
      - "setup"
      - "subnet"
      - "--path"
      - "/data/"
      - "--release"
      - "v${TOPOS_EDGE_VERSION}"
    environment:
      - TOPOS_EDGE_VERSION=${TOPOS_EDGE_VERSION}
    volumes:
      - topos-data:/data

  topos-init:
    container_name: topos-init
    command: sh -c "
      mkdir -p /data/node/ -p /data/subnet/topos && \
      mv -f /data/data-1 /data/node/node-1 && \
      mv -f /data/data-2 /data/node/node-2 && \
      mv -f /data/data-3 /data/node/node-3 && \
      mv -f /data/data-4 /data/node/node-4 && \
      mv -f /data/genesis.json /data/subnet/topos/genesis.json && \
      chmod a+rwx /data/* && ls -lRa /data && cat /data/subnet/topos/genesis.json"
    image: debian:bullseye-slim
    depends_on:
      keystore-init:
        condition: service_completed_successfully
      install-edge:
        condition: service_completed_successfully
    volumes:
      - topos-data:/data
    healthcheck:
      test: ["CMD-SHELL", "test -f /data/subnet/topos/genesis.json"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - network-environment

  topos-node-1:
    build: .
    container_name: topos-node-1
    init: true
    privileged: true
    cap_add:
      - SYS_ADMIN
    security_opt:
      - no-new-privileges
      - seccomp=seccomp-perf.json
    command:
      - "node"
      - "--edge-path"
      - "/data"
      - "up"
      - "--name"
      - "node-1"
      - "--home"
      - "/data"
    healthcheck:
      test: |
        set -e
        ./target/release/topos node status --node http://localhost:1340
        /data/polygon-edge status | grep 'Current Block Number (base 10) = .[0-9]*'
      interval: 5s
      start_period: 1s
      retries: 10
    depends_on:
      topos-init:
        condition: service_completed_successfully
    volumes:
      - topos-data:/data
      - ./node_config/node/topos-node-1/config.toml:/data/node/node-1/config.toml:ro
    restart: on-failure
    ports:
      - "${TOPOS_HOST_PORT}:8545"
      - "9090"
      - "1340:1340"
      - "3030:3030"
      - "4030:4030"
    environment:
      - RUST_LOG=topos=debug,topos_tce_storage=debug,topos_tce_synchronizer=debug
      - PROFILING=true  
    networks:
      - network-environment

  topos-node-2:
    build: .
    container_name: topos-node-2
    init: true
    privileged: true
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges
      - seccomp=seccomp-perf.json
    command:
      - "node"
      - "--edge-path"
      - "/data"
      - "up"
      - "--name"
      - "node-2"
      - "--home"
      - "/data"
    healthcheck:
      test: |
        set -e
        ./target/release/topos node status --node http://localhost:1340
        /data/polygon-edge status | grep 'Current Block Number (base 10) = .[0-9]*'
      interval: 5s
      start_period: 1s
      retries: 10
    depends_on:
      topos-init:
        condition: service_completed_successfully
      topos-node-1:
        condition: service_started
    volumes:
      - topos-data:/data
      - ./node_config/node/topos-node-2/config.toml:/data/node/node-2/config.toml:ro
    restart: on-failure
    ports:
      - "9090"
      - "1340"
      - "3030"
      - "4030"
    environment:
      - RUST_LOG=topos=debug,topos_tce_storage=debug,topos_tce_synchronizer=debug
    networks:
      - network-environment

  topos-node-3:
    build: .
    container_name: topos-node-3
    init: true
    privileged: true
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges
      - seccomp=seccomp-perf.json
    command:
      - "node"
      - "--edge-path"
      - "/data"
      - "up"
      - "--name"
      - "node-3"
      - "--home"
      - "/data"
    healthcheck:
      test: |
        set -e
        ./target/release/topos node status --node http://localhost:1340
        /data/polygon-edge status | grep 'Current Block Number (base 10) = .[0-9]*'
      interval: 5s
      start_period: 1s
      retries: 10
    depends_on:
      topos-init:
        condition: service_completed_successfully
      topos-node-1:
        condition: service_started
    volumes:
      - topos-data:/data
      - ./node_config/node/topos-node-3/config.toml:/data/node/node-3/config.toml:ro
    restart: on-failure
    ports:
      - "9090"
      - "1340"
      - "3030"
      - "4030"
    environment:
      - RUST_LOG=topos=debug,topos_tce_storage=debug,topos_tce_synchronizer=debug
    networks:
      - network-environment

  topos-node-4:
    build: .
    container_name: topos-node-4
    init: true
    privileged: true
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges
      - seccomp=seccomp-perf.json
    command:
      - "node"
      - "--edge-path"
      - "/data"
      - "up"
      - "--name"
      - "node-4"
      - "--home"
      - "/data"
    healthcheck:
      test: |
        set -e
        ./target/release/topos node status --node http://localhost:1340
        /bin/sh /polygon_edge_healthcheck.sh /data
      interval: 5s
      start_period: 1s
      retries: 10
    depends_on:
      topos-init:
        condition: service_completed_successfully
      topos-node-1:
        condition: service_started
    volumes:
      - topos-data:/data
      - ./node_config/node/topos-node-4/config.toml:/data/node/node-4/config.toml:ro
      - ./scripts/polygon_edge_healthcheck.sh:/polygon_edge_healthcheck.sh:ro
    restart: on-failure
    ports:
      - "9090"
      - "1340"
      - "3030"
      - "4030"
    environment:
      - RUST_LOG=topos=debug,topos_tce_storage=debug,topos_tce_synchronizer=debug
    networks:
      - network-environment

  topos-sequencer:
    image: ghcr.io/topos-protocol/topos:${TOPOS_VERSION}
    container_name: topos-sequencer
    init: true
    volumes:
      - ./scripts/sequencer-init.sh:/tmp/init.sh
      - topos-data:/data
      - ./node_config/node/sequencer-topos/config.toml:/data/node/sequencer-topos/config.toml
    depends_on:
      topos-node-1:
        condition: service_healthy
      topos-node-2:
        condition: service_healthy
      topos-node-3:
        condition: service_healthy
      topos-node-4:
        condition: service_healthy
    entrypoint: "bash -c"
    command: /tmp/init.sh
    healthcheck:
      test: ["CMD-SHELL", "test $(netstat -ntu | grep ':8545' | wc -l) -gt 0"]
      start_period: 15s
      interval: 1s
      retries: 10
    environment:
      - SUBNET=topos
      - DATA_FOLDER=/data/node/node-1
      - CONFIG_FOLDER=/data
      - GENESIS_FOLDER=/data/subnet/topos
      - SUBNET_FOLDER=/data/subnet/topos-sequencer
      - RUST_LOG=info,topos=debug
      - TOOLCHAIN_VERSION=stable
      - RUST_BACKTRACE=full
      - TOPOS_OTLP_SERVICE_NAME=local-topos-sequencer
      - TOPOS_OTLP_AGENT=https://otel-collector.telemetry.devnet-1.toposware.com
    networks:
      - network-environment

volumes:
  topos-data:
